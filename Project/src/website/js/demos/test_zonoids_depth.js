// Generated by CoffeeScript 1.12.3
(function() {
  var zonoids_depth_demo, zonoids_depth_p5;

  zonoids_depth_demo = function(p_o) {
    var default_color, draw_poly, h, i, input_points, j, label, leftmost_point, num_input_points, query_point, ref, w, zonoid, zonoid_i, zonoid_list;
    input_points = [new Point(100, 10), new Point(300, 200), new Point(423, 200), new Point(100, 300), new Point(500, 120), new Point(200, 320), new Point(50, 40), new Point(51, 350), new Point(150, 350), new Point(220, 400), new Point(240, 320), new Point(280, 450)];
    num_input_points = 18;
    query_point = false;
    default_color = [121, 204, 147, 40];
    label = false;
    h = 480;
    w = 640;
    zonoid = [];
    zonoid_list = [];
    draw_poly = function(p_o, points, arg) {
      var fill_color, j, len, p_i, ref, stroke_color;
      ref = arg != null ? arg : {}, fill_color = ref.fill_color, stroke_color = ref.stroke_color;
      if (fill_color == null) {
        fill_color = default_color;
      }
      if (stroke_color == null) {
        stroke_color = default_color;
      }
      p_o.fill(fill_color[0], fill_color[1], fill_color[2], fill_color[3]);
      p_o.stroke(stroke_color[0], stroke_color[1], stroke_color[2], stroke_color[3]);
      p_o.beginShape();
      for (j = 0, len = points.length; j < len; j++) {
        p_i = points[j];
        p_o.vertex(p_i.x, p_i.y);
      }
      return p_o.endShape(p_o.CLOSE);
    };
    leftmost_point = function(S) {
      var j, leftmost_p, len, p, ref;
      leftmost_p = S[0];
      ref = S.slice(1, +(S.length - 1) + 1 || 9e9);
      for (j = 0, len = ref.length; j < len; j++) {
        p = ref[j];
        if (p.x < leftmost_p.x) {
          leftmost_p = p;
        }
      }
      return leftmost_p;
    };
    for (i = j = 1, ref = input_points.length; 1 <= ref ? j <= ref : j >= ref; i = 1 <= ref ? ++j : --j) {
      zonoid_i = compute_zonoid(input_points, {
        k: i,
        discrete: true
      });
      zonoid_list.push(radial_sort(zonoid_i, {
        anchor: leftmost_point(zonoid_i),
        cw: true
      }));
    }
    p_o.setup = function() {
      var canvas_zonoid_depth;
      canvas_zonoid_depth = p_o.createCanvas(w, h);
      p_o.fill('red');
      p_o.frameRate(20);
      return label = p_o.createElement('p', '<b>ZONOID DEPTH:</b> 0');
    };
    return p_o.draw = function() {
      var k, k_depth, l, len, len1, len2, len3, m, n, p_i, ref1, z_i;
      p_o.background(253, 253, 253);
      p_o.fill(118, 198, 222);
      p_o.stroke(118, 198, 222);
      for (k = 0, len = input_points.length; k < len; k++) {
        p_i = input_points[k];
        p_o.ellipse(p_i.x, p_i.y, 6, 6);
      }
      for (l = 0, len1 = zonoid_list.length; l < len1; l++) {
        zonoid_i = zonoid_list[l];
        for (m = 0, len2 = zonoid_i.length; m < len2; m++) {
          z_i = zonoid_i[m];
          p_o.fill(16, 74, 34, 60);
          p_o.stroke(16, 74, 34, 255);
          p_o.ellipse(z_i.x, z_i.y, 10, 10);
        }
        draw_poly(p_o, zonoid_i, {
          fill_color: [85, 185, 102, 60],
          stroke_color: [16, 74, 34, 255]
        });
      }
      if (p_o.mouseX >= 0 && p_o.mouseX <= w && p_o.mouseY >= 0 && p_o.mouseY <= h) {
        ref1 = compute_zonoid_depth(input_points, new Point(p_o.mouseX, p_o.mouseY), {
          return_zonoid: true
        }), zonoid = ref1[0], k_depth = ref1[1];
        if (k_depth > 0) {
          console.log("DEPTH: ", k_depth);
          label.html("<b>ZONOID DEPTH:</b> " + k_depth);
          for (n = 0, len3 = zonoid.length; n < len3; n++) {
            z_i = zonoid[n];
            p_o.fill(16, 74, 34, 165);
            p_o.stroke(16, 74, 34, 255);
            p_o.ellipse(z_i.x, z_i.y, 20, 20);
          }
          draw_poly(p_o, radial_sort(zonoid, {
            anchor: leftmost_point(zonoid),
            cw: true
          }), {
            fill_color: [16, 74, 34, 100],
            stroke_color: [16, 74, 34, 255]
          });
        }
        p_o.fill(255, 121, 113, 180);
        p_o.stroke(130, 65, 85);
        p_o.line(0, p_o.mouseY, w, p_o.mouseY);
        p_o.line(p_o.mouseX, 0, p_o.mouseX, h);
        p_o.ellipse(p_o.mouseX, p_o.mouseY, 15, 15);
      }
      p_o.fill("black");
      return p_o.stroke("black");
    };
  };

  zonoids_depth_p5 = new p5(zonoids_depth_demo, "demo-zonoid-depth-canvas");

}).call(this);

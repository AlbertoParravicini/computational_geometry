// Generated by CoffeeScript 1.12.3
var compute_k_level, h, w;

w = 1200;

h = 480;

compute_k_level = function(input_lines, k) {
  var best_so_far, current_line, first_intersection, i, intersections, j, k_level_points, l, l_i, len, lines, ref, x_i, y_i;
  console.log(input_lines);
  lines = input_lines.slice();
  k_level_points = [];
  lines.sort(function(a, b) {
    if (a.q > b.q) {
      return 1;
    } else if (a.q < b.q) {
      return -1;
    } else {
      return 0;
    }
  });
  console.log("\n\nSORTED:\n" + lines);
  current_line = lines[k - 1];
  k_level_points.push(new Point(0, current_line.q));
  while (true) {
    intersections = [];
    for (j = 0, len = lines.length; j < len; j++) {
      l_i = lines[j];
      if (current_line.m === l_i.m) {
        intersections.push(new Point(Number.POSITIVE_INFINITY, Number.POSITIVE_INFINITY));
      } else {
        x_i = (l_i.q - current_line.q) / (current_line.m - l_i.m);
        y_i = l_i.m * x_i + l_i.q;
        intersections.push(new Point(x_i, y_i));
      }
    }
    first_intersection = -1;
    best_so_far = Number.POSITIVE_INFINITY;
    for (i = l = 0, ref = intersections.length - 1; 0 <= ref ? l <= ref : l >= ref; i = 0 <= ref ? ++l : --l) {
      if (intersections[i].x > k_level_points[k_level_points.length - 1].x) {
        if (intersections[i].x < best_so_far) {
          first_intersection = i;
          best_so_far = intersections[i].x;
        }
      }
    }
    if (first_intersection === -1) {
      k_level_points.push(new Point(10000, current_line.m * 10000 + current_line.q));
      break;
    }
    k_level_points.push(intersections[first_intersection]);
    current_line = lines[first_intersection];
  }
  return k_level_points;
};

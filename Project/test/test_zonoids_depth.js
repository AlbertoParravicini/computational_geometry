// Generated by CoffeeScript 1.12.3
var draw, draw_poly, h, i, input_points, j, k, leftmost_point, num_input_points, query_point, ref, ref1, setup, w, zonoid, zonoid_list;

input_points = [new Point(100, 10), new Point(300, 200), new Point(423, 200), new Point(100, 300), new Point(500, 120), new Point(200, 320), new Point(50, 40), new Point(51, 350), new Point(150, 350), new Point(220, 400), new Point(240, 320), new Point(280, 450)];

num_input_points = 40;

query_point = false;

h = 480;

w = 640;

for (i = j = 0, ref = num_input_points - 1; 0 <= ref ? j <= ref : j >= ref; i = 0 <= ref ? ++j : --j) {
  input_points.push(new Point(Math.floor(Math.random() * w), Math.floor(Math.random() * h)));
}

zonoid = [];

zonoid_list = [];

for (i = k = 1, ref1 = input_points.length; 1 <= ref1 ? k <= ref1 : k >= ref1; i = 1 <= ref1 ? ++k : --k) {
  zonoid_list.push(compute_zonoid(input_points, {
    k: i,
    discrete: true
  }));
}

setup = function() {
  createCanvas(w, h);
  return fill('black');
};

draw = function() {
  var k_depth, l, len, len1, len2, len3, m, n, o, p_i, ref2, z_i, zonoid_i;
  background(255, 251, 234);
  fill(118, 198, 222);
  stroke(118, 198, 222);
  for (l = 0, len = input_points.length; l < len; l++) {
    p_i = input_points[l];
    ellipse(p_i.x, p_i.y, 6, 6);
  }
  fill(16, 74, 34, 180);
  stroke(16, 74, 34);
  ref2 = compute_zonoid_depth(input_points, new Point(mouseX, mouseY), {
    return_zonoid: true
  }), zonoid = ref2[0], k_depth = ref2[1];
  if (k_depth > 0) {
    console.log("DEPTH: ", k_depth);
    for (m = 0, len1 = zonoid.length; m < len1; m++) {
      z_i = zonoid[m];
      ellipse(z_i.x, z_i.y, 20, 20);
    }
    draw_poly(radial_sort(zonoid, {
      anchor: leftmost_point(zonoid),
      cw: true
    }));
  }
  for (n = 0, len2 = zonoid_list.length; n < len2; n++) {
    zonoid_i = zonoid_list[n];
    for (o = 0, len3 = zonoid_i.length; o < len3; o++) {
      z_i = zonoid_i[o];
      ellipse(z_i.x, z_i.y, 10, 10);
    }
    draw_poly(radial_sort(zonoid_i, {
      anchor: leftmost_point(zonoid_i),
      cw: true
    }));
  }
  ellipse(mouseX, mouseY, 15, 15);
  line(0, mouseY, w, mouseY);
  fill("black");
  return stroke("black");
};

draw_poly = function(points) {
  var l, len, p_i;
  fill(121, 204, 147, 40);
  beginShape();
  for (l = 0, len = points.length; l < len; l++) {
    p_i = points[l];
    vertex(p_i.x, p_i.y);
  }
  return endShape(CLOSE);
};

leftmost_point = function(S) {
  var l, leftmost_p, len, p, ref2;
  leftmost_p = S[0];
  ref2 = S.slice(1, +(S.length - 1) + 1 || 9e9);
  for (l = 0, len = ref2.length; l < len; l++) {
    p = ref2[l];
    if (p.x < leftmost_p.x) {
      leftmost_p = p;
    }
  }
  return leftmost_p;
};

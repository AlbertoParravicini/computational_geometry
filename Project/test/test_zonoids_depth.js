// Generated by CoffeeScript 1.12.3
var default_color, draw, draw_poly, h, i, input_points, j, leftmost_point, num_input_points, query_point, ref, setup, w, zonoid, zonoid_list;

input_points = [new Point(100, 10), new Point(300, 200), new Point(423, 200), new Point(100, 300), new Point(500, 120), new Point(200, 320), new Point(50, 40), new Point(51, 350), new Point(150, 350), new Point(220, 400), new Point(240, 320), new Point(280, 450)];

num_input_points = 14;

query_point = false;

default_color = [121, 204, 147, 40];

h = 480;

w = 640;

zonoid = [];

zonoid_list = [];

for (i = j = 1, ref = input_points.length; 1 <= ref ? j <= ref : j >= ref; i = 1 <= ref ? ++j : --j) {
  zonoid_list.push(compute_zonoid(input_points, {
    k: i,
    discrete: true
  }));
}

setup = function() {
  createCanvas(w, h);
  return fill('black');
};

draw = function() {
  var k, k_depth, l, len, len1, len2, len3, m, n, p_i, ref1, z_i, zonoid_i;
  background(255, 251, 234);
  fill(118, 198, 222);
  stroke(118, 198, 222);
  for (k = 0, len = input_points.length; k < len; k++) {
    p_i = input_points[k];
    ellipse(p_i.x, p_i.y, 6, 6);
  }
  for (l = 0, len1 = zonoid_list.length; l < len1; l++) {
    zonoid_i = zonoid_list[l];
    for (m = 0, len2 = zonoid_i.length; m < len2; m++) {
      z_i = zonoid_i[m];
      fill(16, 74, 34, 60);
      stroke(16, 74, 34, 255);
      ellipse(z_i.x, z_i.y, 10, 10);
    }
    draw_poly(radial_sort(zonoid_i, {
      anchor: leftmost_point(zonoid_i),
      cw: true
    }), {
      fill_color: [85, 185, 102, 60],
      stroke_color: [16, 74, 34, 255]
    });
  }
  ref1 = compute_zonoid_depth(input_points, new Point(mouseX, mouseY), {
    return_zonoid: true
  }), zonoid = ref1[0], k_depth = ref1[1];
  if (k_depth > 0) {
    console.log("DEPTH: ", k_depth);
    for (n = 0, len3 = zonoid.length; n < len3; n++) {
      z_i = zonoid[n];
      fill(16, 74, 34, 165);
      stroke(16, 74, 34, 255);
      ellipse(z_i.x, z_i.y, 20, 20);
    }
    draw_poly(radial_sort(zonoid, {
      anchor: leftmost_point(zonoid),
      cw: true
    }), {
      fill_color: [16, 74, 34, 100],
      stroke_color: [16, 74, 34, 255]
    });
  }
  fill(255, 121, 113, 180);
  stroke(130, 65, 85);
  line(0, mouseY, w, mouseY);
  line(mouseX, 0, mouseX, h);
  ellipse(mouseX, mouseY, 15, 15);
  fill("black");
  return stroke("black");
};

draw_poly = function(points, arg) {
  var fill_color, k, len, p_i, ref1, stroke_color;
  ref1 = arg != null ? arg : {}, fill_color = ref1.fill_color, stroke_color = ref1.stroke_color;
  if (fill_color == null) {
    fill_color = default_color;
  }
  if (stroke_color == null) {
    stroke_color = default_color;
  }
  fill(fill_color[0], fill_color[1], fill_color[2], fill_color[3]);
  stroke(stroke_color[0], stroke_color[1], stroke_color[2], stroke_color[3]);
  beginShape();
  for (k = 0, len = points.length; k < len; k++) {
    p_i = points[k];
    vertex(p_i.x, p_i.y);
  }
  return endShape(CLOSE);
};

leftmost_point = function(S) {
  var k, leftmost_p, len, p, ref1;
  leftmost_p = S[0];
  ref1 = S.slice(1, +(S.length - 1) + 1 || 9e9);
  for (k = 0, len = ref1.length; k < len; k++) {
    p = ref1[k];
    if (p.x < leftmost_p.x) {
      leftmost_p = p;
    }
  }
  return leftmost_p;
};

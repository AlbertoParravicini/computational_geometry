// Generated by CoffeeScript 1.12.3
var default_color, draw, draw_poly, dual_lines, h, input_points, k, k_level_d, k_level_u, leftmost_point, mouseWheel, num_input_points, reflex_vertices_d, reflex_vertices_u, rightmost_point, scale_factor, setup, w, zonoid, zonoid_lines, zonoid_vertices_d, zonoid_vertices_u;

input_points = [new Point(100, 10), new Point(300, 200), new Point(423, 200), new Point(100, 300), new Point(500, 120), new Point(200, 320), new Point(50, 40), new Point(51, 350), new Point(150, 350), new Point(220, 400), new Point(240, 320), new Point(280, 450)];

default_color = [121, 204, 147, 200];

num_input_points = 15;

scale_factor = 1;

w = 1200;

h = 700;

dual_lines = [];

k = 5;

k_level_u = [];

reflex_vertices_u = [];

zonoid_vertices_u = [];

k_level_d = [];

reflex_vertices_d = [];

zonoid_vertices_d = [];

zonoid_lines = [];

zonoid = [];

setup = function() {
  var j, len, len1, m, p, p_i, results, zonoid_dual_vertices;
  createCanvas(w, h);
  fill('red');
  frameRate(10);
  for (j = 0, len = input_points.length; j < len; j++) {
    p = input_points[j];
    dual_lines.push(create_line_from_m_q(p.x, p.y * scale_factor));
  }
  k_level_u = compute_k_level(dual_lines, k);
  reflex_vertices_u = compute_reflex_vertices(k_level_u, {
    up: true
  });
  zonoid_vertices_u = compute_zonoid_vertices_from_reflex(reflex_vertices_u, dual_lines, {
    up: true
  });
  k_level_d = compute_k_level(dual_lines, dual_lines.length - k + 1);
  reflex_vertices_d = compute_reflex_vertices(k_level_d, {
    up: false
  });
  zonoid_vertices_d = compute_zonoid_vertices_from_reflex(reflex_vertices_d, dual_lines, {
    up: false
  });
  zonoid_dual_vertices = zonoid_vertices_u.concat(zonoid_vertices_d);
  results = [];
  for (m = 0, len1 = zonoid_dual_vertices.length; m < len1; m++) {
    p_i = zonoid_dual_vertices[m];
    results.push(zonoid_lines.push(new Line(new Point(-10000, p_i.x * -10000 + p_i.y), new Point(10000, p_i.x * 10000 + p_i.y), p_i.x, p_i.y)));
  }
  return results;
};

draw = function() {
  var i, j, l, l_i, len, len1, len2, len3, len4, len5, len6, m, n, o, p, q, r, ref, ref1, ref2, ref3, s, t, u, v, x, y, z_i;
  background(255, 251, 234);
  fill("black");
  stroke("black");
  for (j = 0, len = dual_lines.length; j < len; j++) {
    l = dual_lines[j];
    stroke(default_color);
    strokeWeight(2);
    line(l.start.x, l.start.y, l.end.x, l.end.y);
  }
  fill(143, 27, 10, 200);
  stroke(231, 120, 58, 200);
  for (i = m = 1, ref = k_level_u.length - 1; 1 <= ref ? m <= ref : m >= ref; i = 1 <= ref ? ++m : --m) {
    strokeWeight(6);
    line(k_level_u[i - 1].x, k_level_u[i - 1].y, k_level_u[i].x, k_level_u[i].y);
  }
  strokeWeight(1);
  for (n = 0, len1 = reflex_vertices_u.length; n < len1; n++) {
    p = reflex_vertices_u[n];
    fill(143, 27, 10, 200);
    stroke(231, 120, 58, 200);
    ellipse(p.x, p.y, 20, 20);
    y = p.y - 15;
    fill(default_color);
    stroke(default_color);
    strokeWeight(2);
    while (y > 0) {
      ellipse(p.x, y, 2, 2);
      y -= 10;
    }
  }
  fill(143, 27, 10, 200);
  stroke(231, 120, 58, 200);
  strokeWeight(6);
  if (zonoid_vertices_u.length > 1) {
    for (i = o = 1, ref1 = zonoid_vertices_u.length - 1; 1 <= ref1 ? o <= ref1 : o >= ref1; i = 1 <= ref1 ? ++o : --o) {
      line(zonoid_vertices_u[i - 1].x, zonoid_vertices_u[i - 1].y, zonoid_vertices_u[i].x, zonoid_vertices_u[i].y);
    }
  }
  strokeWeight(2);
  for (q = 0, len2 = zonoid_vertices_u.length; q < len2; q++) {
    p = zonoid_vertices_u[q];
    ellipse(p.x, p.y, 20, 20);
  }
  fill(98, 122, 161, 200);
  stroke(21, 32, 50, 200);
  for (i = r = 1, ref2 = k_level_d.length - 1; 1 <= ref2 ? r <= ref2 : r >= ref2; i = 1 <= ref2 ? ++r : --r) {
    strokeWeight(6);
    line(k_level_d[i - 1].x, k_level_d[i - 1].y, k_level_d[i].x, k_level_d[i].y);
  }
  strokeWeight(2);
  for (s = 0, len3 = reflex_vertices_d.length; s < len3; s++) {
    p = reflex_vertices_d[s];
    fill(98, 122, 161, 200);
    stroke(21, 32, 50, 200);
    ellipse(p.x, p.y, 20, 20);
    y = p.y + 15;
    fill(default_color);
    stroke(default_color);
    strokeWeight(2);
    while (y < h) {
      ellipse(p.x, y, 2, 2);
      y += 10;
    }
  }
  fill(98, 122, 161, 200);
  stroke(21, 32, 50, 200);
  strokeWeight(6);
  if (zonoid_vertices_d.length > 1) {
    for (i = t = 1, ref3 = zonoid_vertices_d.length - 1; 1 <= ref3 ? t <= ref3 : t >= ref3; i = 1 <= ref3 ? ++t : --t) {
      line(zonoid_vertices_d[i - 1].x, zonoid_vertices_d[i - 1].y, zonoid_vertices_d[i].x, zonoid_vertices_d[i].y);
    }
  }
  strokeWeight(2);
  for (u = 0, len4 = zonoid_vertices_d.length; u < len4; u++) {
    p = zonoid_vertices_d[u];
    ellipse(p.x, p.y, 20, 20);
  }
  for (v = 0, len5 = zonoid_lines.length; v < len5; v++) {
    l_i = zonoid_lines[v];
    line(l_i.start.x + 500, l_i.start.y, l_i.end.x + 500, l_i.end.y);
  }
  for (x = 0, len6 = zonoid.length; x < len6; x++) {
    z_i = zonoid[x];
    fill(16, 74, 34, 180);
    stroke(16, 74, 34, 255);
    ellipse(z_i.x, z_i.y, 20, 20);
    ellipse(z_i.x, z_i.y, 10, 10);
  }
  if (zonoid.length > 0) {
    draw_poly(radial_sort(zonoid, {
      anchor: leftmost_point(zonoid),
      cw: true
    }));
    return draw_poly(zonoid, {
      fill_color: [78, 185, 120, 160],
      stroke_color: [16, 74, 34, 255]
    });
  }
};

mouseWheel = function(event) {
  var j, len, p_i, zonoid_dual_vertices;
  if (event.delta > 0) {
    k -= 1;
  } else if (event.delta < 0) {
    k += 1;
  }
  if (k < 1) {
    k = 1;
  }
  if (k > dual_lines.length) {
    k = dual_lines.length;
  }
  k_level_u = compute_k_level(dual_lines, k);
  reflex_vertices_u = compute_reflex_vertices(k_level_u, {
    up: true
  });
  zonoid_vertices_u = compute_zonoid_vertices_from_reflex(reflex_vertices_u, dual_lines, {
    up: true
  });
  k_level_d = compute_k_level(dual_lines, dual_lines.length - k + 1);
  reflex_vertices_d = compute_reflex_vertices(k_level_d, {
    up: false
  });
  zonoid_vertices_d = compute_zonoid_vertices_from_reflex(reflex_vertices_d, dual_lines, {
    up: false
  });
  zonoid_dual_vertices = zonoid_vertices_u.concat(zonoid_vertices_d);
  zonoid_lines = [];
  for (j = 0, len = zonoid_dual_vertices.length; j < len; j++) {
    p_i = zonoid_dual_vertices[j];
    zonoid_lines.push(new Line(new Point(-10000, p_i.x * -10000 + p_i.y), new Point(10000, p_i.x * 10000 + p_i.y), p_i.x, p_i.y));
  }
  zonoid = compute_zonoid(input_points, {
    k: k - 1
  });
  return console.log("K: ", k);
};

draw_poly = function(points, arg) {
  var fill_color, j, len, p_i, ref, stroke_color;
  ref = arg != null ? arg : {}, fill_color = ref.fill_color, stroke_color = ref.stroke_color;
  if (fill_color == null) {
    fill_color = default_color;
  }
  if (stroke_color == null) {
    stroke_color = default_color;
  }
  fill(fill_color[0], fill_color[1], fill_color[2], fill_color[3]);
  stroke(stroke_color[0], stroke_color[1], stroke_color[2], stroke_color[3]);
  beginShape();
  for (j = 0, len = points.length; j < len; j++) {
    p_i = points[j];
    vertex(p_i.x, p_i.y);
  }
  return endShape(CLOSE);
};

leftmost_point = function(S) {
  var j, leftmost_p, len, p, ref;
  leftmost_p = S[0];
  ref = S.slice(1, +(S.length - 1) + 1 || 9e9);
  for (j = 0, len = ref.length; j < len; j++) {
    p = ref[j];
    if (p.x < leftmost_p.x) {
      leftmost_p = p;
    }
  }
  return leftmost_p;
};

rightmost_point = function(S) {
  var j, len, p, ref, rightmost_p;
  rightmost_p = S[0];
  ref = S.slice(1, +(S.length - 1) + 1 || 9e9);
  for (j = 0, len = ref.length; j < len; j++) {
    p = ref[j];
    if (p.x > rightmost_p.x) {
      rightmost_p = p;
    }
  }
  return rightmost_p;
};

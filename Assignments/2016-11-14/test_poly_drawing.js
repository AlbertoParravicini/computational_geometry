// Generated by CoffeeScript 1.11.1
var draw, drawing_polygon_done, h, input_points, keyPressed, mousePressed, query_point, setup, w;

input_points = [];

drawing_polygon_done = false;

query_point = false;

w = 1200;

h = 800;

setup = function() {
  createCanvas(w, h);
  return fill('black');
};

draw = function() {
  var i, j, k, len, p_i, ref;
  background(200);
  line(0, h / 2, w, h / 2);
  line(w / 2, 0, w / 2, h);
  fill("black");
  stroke("black");
  for (j = 0, len = input_points.length; j < len; j++) {
    p_i = input_points[j];
    ellipse(p_i.x, p_i.y, 4, 4);
  }
  if (input_points.length >= 2) {
    for (i = k = 0, ref = input_points.length - 2; 0 <= ref ? k <= ref : k >= ref; i = 0 <= ref ? ++k : --k) {
      line(input_points[i].x, input_points[i].y, input_points[i + 1].x, input_points[i + 1].y);
    }
  }
  if (query_point) {
    fill("green");
    stroke("green");
    ellipse(query_point.x, query_point.y, 10, 10);
    fill("red");
    stroke("red");
    line(0, query_point.y, w, query_point.y);
    fill("black");
    return stroke("black");
  }
};

mousePressed = function() {
  var new_point, result;
  if (!drawing_polygon_done) {
    new_point = new Point(mouseX, mouseY);
    if (check_self_intersection_new_point(input_points, new_point)) {
      return console.log(new_point, "creates a self-intersection!");
    } else {
      return input_points.push(new_point);
    }
  } else {
    query_point = new Point(mouseX, mouseY);
    redraw();
    result = check_inclusion_in_polygon(input_points, query_point) ? "INSIDE" : "OUTSIDE";
    return console.log("the point is ", result, "!\n");
  }
};

keyPressed = function() {
  var direction;
  if (input_points.length > 2 && !drawing_polygon_done) {
    if (check_self_intersection_new_point(input_points, input_points[0])) {
      return console.log("Closing the polygon creates a self-intersection!");
    } else {
      drawing_polygon_done = true;
      direction = simple_polygon_orientation_clockwise(input_points) ? "clockwise" : "counter-clockwise";
      return console.log("direction: ", direction, "\n");
    }
  }
};
